# -*- ruby -*-
require "rake"
require "rake/clean"
require "pathname"

CLOBBER.include("build", "crossbuild", "docs/scripting/html", "docs/scripting/rdoc", "docs/api")

str = File.read("CMakeLists.txt")
SMC_VERSION_MAJOR = str.match(/^set\(SMC_VERSION_MAJOR (\d+)\)/)[1]
SMC_VERSION_MINOR = str.match(/^set\(SMC_VERSION_MINOR (\d+)\)/)[1]
SMC_VERSION_PATCH = str.match(/^set\(SMC_VERSION_PATCH (\d+)\)/)[1]

SMC_SOURCE_FILES = FileList["src/**/*.cpp"] + FileList["src/**/*.hpp"]

# This is called from CMake for generating the credits file.
rule %r{credits.cpp} => "docs/authors.txt" do |t|
  puts "Converting docs/authors.txt to C++ source file"

  File.open(t.name, "w") do |f|
    # Write first part
    f.puts(%Q!#include "#{Dir.pwd}/src/core/global_game.hpp"
#include "#{Dir.pwd}/src/core/main.hpp"

namespace SMC {

	const std::string g_credits = "\\\n!)

    File.open("docs/authors.txt") do |f2|
      # Skip to real content
      loop do
        line = f2.gets
        break if line.start_with?("=-=-=-")
      end
      f2.gets

      # Write out the remaining part to the cpp file
      while (line = f2.gets)
        f.write(line.chomp)
        f.puts("\\n\\")
      end

      # Write final part
      f.write("\";\n}\n")
    end
  end
end

file "data/translations/Secret Maryo Chronicles.pot" => SMC_SOURCE_FILES do
  # Note PL_() is not yet used. For future pluralization.
  # It should be defined like this in i18n.hpp:
  #   #define PL_(Singular, Plural, Num) ngettext(Singular, Plural, Num)
  # UTF8_() should go away.

  sourcefiles = SMC_SOURCE_FILES.map{|path| Pathname.new(path).expand_path.relative_path_from(Pathname.new("data/translations").expand_path)}
  cd "data/translations" do
    sh %Q<xgettext --add-comments="TRANS:" --language=C++ --from-code=UTF-8 --keyword=_ --keyword=N_ --keyword=UTF8_ --keyword=PL_:1,2 --copyright-holder='The SMC Contributors' --package-name='Secret Maryo Chronicles' #{sourcefiles.map(&:to_s).join(' ')} -o "Secret Maryo Chronicles.pot">
  end
end

desc "Generate the 'Secret Maryo Chronicles.pot' base PO template file."
task :potfile => "data/translations/Secret Maryo Chronicles.pot"

desc "Check the PO files for errors."
task :checkpo do
  cd "data/translations" do
    Dir["*.po"].sort.each do |pofile|
      sh "msgfmt -o /dev/null -c --statistics #{pofile}"
    end
  end
end

# Note that strictly the .po files depend on the .pot file, but
# the .pot file should only ever be updated on purpose and not
# as part of updating the .po files, as it is the reference file
# for all translators and thus must stay the same. Changes in it
# require all translators to review their translation. Therefore
# this task is phony (always required) rather than depending
# on the "Secret Maryo Chronicles.pot" file task above.
desc "Update the .po files against the master .pot file."
task :mergepo do
  cd "data/translations" do
    Dir["*.po"].sort.each do |pofile|
      sh "msgmerge -U #{pofile} 'Secret Maryo Chronicles.pot'"
    end
  end
end

desc "Generate the documentation."
task :docs do
  puts "Generating main API documentation"
  sh "doxygen"
  puts "Generating scripting API documentation"
  cd "docs/scripting" do
    sh "ruby gen_docs.rb"
  end
  puts "Generating SSL documentation"
  sh "rdoc -o docs/ssl -m docs/scripting/ssl.rdoc -t 'SMC Standard Scripting Library' data/scripting docs/scripting/ssl.rdoc"
end

desc "Create source tarball."
task :tarball => :clobber do
  version = ENV["VERSION"] || "#{SMC_VERSION_MAJOR}.#{SMC_VERSION_MINOR}.#{SMC_VERSION_PATCH}"
  puts "Packaging SMC version #{version}"

  sh "git submodule init"
  sh "git submodule update"

  cd "../.." do
    ln_s "SMC", "SMC-#{version}" unless File.exist?("SMC-#{version}")
    sh "tar --exclude .git --exclude drafts -cvJhf SMC-#{version}.tar.xz SMC-#{version}"
  end
end
