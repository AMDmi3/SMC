# -*- ruby -*-
require "rake"
require "rake/clean"

CLEAN.include("src/credits.cpp")
CLOBBER.include("build", "crossbuild", "docs/scripting/html", "docs/scripting/rdoc", "docs/api")

str = File.read("CMakeLists.txt")
SMC_VERSION_MAJOR = str.match(/^set\(SMC_VERSION_MAJOR (\d+)\)/)[1]
SMC_VERSION_MINOR = str.match(/^set\(SMC_VERSION_MINOR (\d+)\)/)[1]
SMC_VERSION_PATCH = str.match(/^set\(SMC_VERSION_PATCH (\d+)\)/)[1]

# This task is called from CMake.
file "src/credits.cpp" => "docs/authors.txt" do
  puts "Converting docs/authors.txt to C++ source file"

  File.open("src/credits.cpp", "w") do |f|
    # Write first part
    f.puts(%Q!#include "core/global_game.hpp"
#include "core/main.hpp"

namespace SMC {

	const std::string g_credits = "\\\n!)

    File.open("docs/authors.txt") do |f2|
      # Skip to real content
      loop do
        line = f2.gets
        break if line.start_with?("=-=-=-")
      end
      f2.gets

      # Write out the remaining part to the cpp file
      while (line = f2.gets)
        f.write(line.chomp)
        f.puts("\\n\\")
      end

      # Write final part
      f.write("\";\n}\n")
    end
  end
end

desc "Generate the documentation."
task :docs do
  puts "Generating main API documentation"
  sh "doxygen"
  puts "Generating scripting API documentation"
  cd "docs/scripting" do
    sh "ruby gen_docs.rb"
  end
  puts "Generating SSL documentation"
  sh "rdoc -o docs/ssl -m docs/scripting/ssl.rdoc -t 'SMC Standard Scripting Library' data/scripting docs/scripting/ssl.rdoc"
end

desc "Create source tarball."
task :tarball => :clobber do
  version = ENV["VERSION"] || "#{SMC_VERSION_MAJOR}.#{SMC_VERSION_MINOR}.#{SMC_VERSION_PATCH}"
  puts "Packaging SMC version #{version}"

  sh "git submodule init"
  sh "git submodule update"

  cd "../.." do
    ln_s "SMC", "SMC-#{version}" unless File.exist?("SMC-#{version}")
    sh "tar --exclude .git --exclude drafts -cvJhf SMC-#{version}.tar.xz SMC-#{version}"
  end
end
